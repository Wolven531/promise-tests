{"version":3,"sources":["logo.svg","SimpleAppContent.tsx","utils.ts","Example.ts","App.tsx","examples/examples.ts","AppWithAsync.tsx","examples/examplesAsync.ts","AppWithQ.tsx","examples/examplesQ.ts","serviceWorker.ts","index.tsx","ExampleViewer.tsx"],"names":["module","exports","SimpleAppContent","props","useEffect","newTitle","pageTitle","window","document","title","className","src","logo","alt","undefined","children","Example","text","summary","description","examples","App","ExampleViewer","AppWithAsync","AppWithQ","Boolean","location","hostname","match","ReactDOM","render","path","component","to","getElementById","navigator","serviceWorker","ready","then","registration","unregister","useState","currentExampleIndex","setCurrentExampleIndex","handleClickNext","oldIndex","length","handleClickPrevious","newVal","handleClickRun","eval","err","alert","currentExample","onClick","cols","readOnly","rows","style","margin","value"],"mappings":"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","file":"static/js/main.d4f65904.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { FC, useEffect } from 'react'\r\n\r\n// utils\r\nimport { setPageTitle } from './utils'\r\n\r\n// resources\r\nimport logo from './logo.svg'\r\n\r\ninterface ISimpleAppProps {\r\n\tpageTitle: string\r\n}\r\n\r\nconst SimpleAppContent: FC<ISimpleAppProps> = (props) => {\r\n\tuseEffect(() => {\r\n\t\tsetPageTitle(props.pageTitle)\r\n\t}, [props.pageTitle])\r\n\r\n\treturn (\r\n\t\t<div className=\"app\">\r\n\t\t\t<header className=\"app-header\">\r\n\t\t\t\t<img src={logo} className=\"app-logo\" alt=\"logo\" />\r\n\t\t\t\t<h2>{props.pageTitle}</h2>\r\n\t\t\t\t{props.children !== undefined && props.children}\r\n\t\t\t</header>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport { SimpleAppContent }\r\n","/**\r\n *\r\n * @param newTitle The value that will become the page title\r\n * @type string\r\n */\r\nconst setPageTitle = (newTitle: string) => {\r\n\twindow.document.title = newTitle\r\n}\r\n\r\nexport interface IResolution {\r\n\terror?: string\r\n\tmsg: string\r\n}\r\n\r\nexport { setPageTitle }\r\n","class Example {\r\n\t/**\r\n\t * @param text The snippet of JS that constitutes the example\r\n\t * @param summary A brief summary of the example\r\n\t * @param description An optional detailed explanation of the example\r\n\t */\r\n\tconstructor(\r\n\t\tpublic text: string,\r\n\t\tpublic summary: string,\r\n\t\tpublic description = ''\r\n\t\t) { }\r\n}\r\n\r\nexport { Example }\r\n","import React, { FC } from 'react'\r\n\r\n// local\r\nimport {\r\n\tEXAMPLE_INVALID_NATIVE_PROMISE,\r\n\tEXAMPLE_INVALID_NATIVE_PROMISE_UNDEFINED,\r\n\tEXAMPLE_INVALID_NATIVE_PROMISE_UNRESOLVED,\r\n\tEXAMPLE_INVALID_NATIVE_PROMISE_UNRESOLVED_2,\r\n\tEXAMPLE_VALID_NATIVE_PROMISE,\r\n\tEXAMPLE_VALID_NATIVE_PROMISE_REJECTED,\r\n\tEXAMPLE_VALID_NATIVE_PROMISE_SINGLE_ARG\r\n} from './examples/examples'\r\n\r\nimport { Example } from './Example'\r\nimport { ExampleViewer } from './ExampleViewer'\r\n\r\nimport './App.css'\r\n\r\nconst examples = [\r\n\tnew Example(EXAMPLE_VALID_NATIVE_PROMISE, 'A Valid Resolved Native Promise using JS'),\r\n\tnew Example(\r\n\t\tEXAMPLE_VALID_NATIVE_PROMISE_SINGLE_ARG,\r\n\t\t'A Valid Resolved Native Promise using JS',\r\n\t\t'This form uses a single argument'),\r\n\tnew Example(EXAMPLE_VALID_NATIVE_PROMISE_REJECTED, 'A Valid Rejected Native Promise using JS'),\r\n\tnew Example(\r\n\t\tEXAMPLE_INVALID_NATIVE_PROMISE,\r\n\t\t'An Invalid Native Promise using JS',\r\n\t\t'This promise will resolve with the wrong value type'),\r\n\tnew Example(\r\n\t\tEXAMPLE_INVALID_NATIVE_PROMISE_UNDEFINED,\r\n\t\t'An Invalid Native Promise using JS',\r\n\t\t'This promise will resolve with undefined'),\r\n\tnew Example(\r\n\t\tEXAMPLE_INVALID_NATIVE_PROMISE_UNRESOLVED,\r\n\t\t'An Invalid Native Promise using JS',\r\n\t\t'This promise will never resolve'),\r\n\tnew Example(\r\n\t\tEXAMPLE_INVALID_NATIVE_PROMISE_UNRESOLVED_2,\r\n\t\t'An Invalid Native Promise using JS',\r\n\t\t'This promise will also never resolve')\r\n]\r\n\r\nconst App: FC<any> = () => {\r\n\treturn <ExampleViewer\r\n\t\texamples={examples}\r\n\t\ttitle={'App (Examples using native Promises)'} />\r\n}\r\n\r\nexport default App\r\n","export const EXAMPLE_VALID_NATIVE_PROMISE =\r\n`const p = new Promise((resolve, reject) => { resolve({ msg: 'from resolve' }) })\r\n\r\nalert('promise created')\r\n\r\np.then(({ error, msg }) => {\r\n\tif (error) {\r\n\t\tthrow new Error(error)\r\n\t}\r\n\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n})\r\n.catch(err => {\r\n\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n})\r\n`\r\n\r\nexport const EXAMPLE_VALID_NATIVE_PROMISE_SINGLE_ARG =\r\n`const p = new Promise(resolve => { resolve({ msg: 'from resolve' }) })\r\n\r\nalert('promise created')\r\n\r\np.then(({ error, msg }) => {\r\n\tif (error) {\r\n\t\tthrow new Error(error)\r\n\t}\r\n\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n})\r\n.catch(err => {\r\n\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n})\r\n`\r\n\r\nexport const EXAMPLE_VALID_NATIVE_PROMISE_REJECTED =\r\n`const p = new Promise((resolve, reject) => { reject({ error: 'from reject' }) })\r\n\r\nalert('promise created')\r\n\r\np.then(({ error, msg }) => {\r\n\tif (error) {\r\n\t\tthrow new Error(error)\r\n\t}\r\n\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n})\r\n.catch(err => {\r\n\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n})\r\n`\r\n\r\nexport const EXAMPLE_INVALID_NATIVE_PROMISE =\r\n`// NOTE: invalid because of TSC: Argument of type '5' is not assignable\r\n// to parameter of type 'IResolution | PromiseLike<IResolution> | undefined'\r\nconst p = new Promise((resolve, reject) => { resolve(5) })\r\n\r\nalert('promise created')\r\n\r\np.then(({ error, msg }) => {\r\n\tif (error) {\r\n\t\tthrow new Error(error)\r\n\t}\r\n\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n})\r\n.catch(err => {\r\n\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n})\r\n`\r\n\r\nexport const EXAMPLE_INVALID_NATIVE_PROMISE_UNDEFINED =\r\n`// NOTE: is NOT invalid because return type allows undefined\r\n// WARNING: does NOT match expected return type on resolution\r\nconst p = new Promise((resolve, reject) => { resolve() })\r\n\r\nalert('promise created')\r\n\r\np.then(({ error, msg }) => {\r\n\tif (error) {\r\n\t\tthrow new Error(error)\r\n\t}\r\n\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n})\r\n.catch(err => {\r\n\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n})\r\n`\r\n\r\nexport const EXAMPLE_INVALID_NATIVE_PROMISE_UNRESOLVED =\r\n`// NOTE: is NOT invalid because return type allows undefined\r\n// WARNING: leaves promise unresolved AND unrejected - causes problems\r\nconst p = new Promise((resolve, reject) => { return })\r\n\r\nalert('promise created')\r\n\r\np.then(({ error, msg }) => {\r\n\tif (error) {\r\n\t\tthrow new Error(error)\r\n\t}\r\n\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n})\r\n.catch(err => {\r\n\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n})\r\n`\r\n\r\nexport const EXAMPLE_INVALID_NATIVE_PROMISE_UNRESOLVED_2 =\r\n`// NOTE: is NOT invalid because return type allows undefined\r\n// WARNING: leaves promise unresolved AND unrejected - causes problems\r\nconst p = new Promise((resolve, reject) => {})\r\n\r\nalert('promise created')\r\n\r\np.then(({ error, msg }) => {\r\n\tif (error) {\r\n\t\tthrow new Error(error)\r\n\t}\r\n\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n})\r\n.catch(err => {\r\n\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n})\r\n`\r\n","import React, { FC } from 'react'\r\n\r\n// local\r\nimport {\r\n\tASYNC_EXAMPLE_INVALID_PROMISE,\r\n\tASYNC_EXAMPLE_INVALID_VOID,\r\n\tASYNC_EXAMPLE_VALID,\r\n\tASYNC_EXAMPLE_VALID_IIFE,\r\n\tASYNC_EXAMPLE_VALID_REJECTED\r\n} from './examples/examplesAsync'\r\n\r\nimport { Example } from './Example'\r\nimport { ExampleViewer } from './ExampleViewer'\r\n\r\nimport './App.css'\r\n\r\nconst examples: Example[] = [\r\n\tnew Example(ASYNC_EXAMPLE_VALID, 'A Valid Resolved Promise using async / await'),\r\n\tnew Example(\r\n\t\tASYNC_EXAMPLE_VALID_IIFE,\r\n\t\t'A Valid Resolved Promise using async / await',\r\n\t\t'This is IIFE form (Immediately Invoked Function Expression)'),\r\n\tnew Example(\r\n\t\tASYNC_EXAMPLE_VALID_REJECTED,\r\n\t\t'A Valid Rejected Promise using async / await',\r\n\t\t'This example throws an Error during resolution to force a rejection'),\r\n\tnew Example(\r\n\t\tASYNC_EXAMPLE_INVALID_PROMISE,\r\n\t\t'An Invalid Promise using async / await',\r\n\t\t'This promise will resolve with the wrong value type'),\r\n\tnew Example(\r\n\t\tASYNC_EXAMPLE_INVALID_VOID,\r\n\t\t'An Invalid Promise using async / await',\r\n\t\t'This promise will never resolve')\r\n]\r\n\r\nconst AppWithAsync: FC<any> = () => {\r\n\treturn <ExampleViewer\r\n\t\texamples={examples}\r\n\t\ttitle={'AppWithAsync (Examples using await / async keywords)'} />\r\n}\r\n\r\nexport default AppWithAsync\r\n","export const ASYNC_EXAMPLE_VALID =\r\n`const someAsyncFunc = async () => ({ msg: 'from resolve' })\r\n\r\n// NOTE: in order to use await keyword, must be inside an async function\r\nasync function runExample() {\r\n\ttry {\r\n\t\talert('about to create promise...')\r\n\r\n\t\tconst { error, msg } = await someAsyncFunc()\r\n\r\n\t\tif (error) {\r\n\t\t\tthrow new Error(error)\r\n\t\t}\r\n\t\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n\t} catch(err) {\r\n\t\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n\t}\r\n}\r\nrunExample()\r\n`\r\n\r\nexport const ASYNC_EXAMPLE_VALID_IIFE =\r\n`// NOTE: in order to use await keyword, must be inside an async function\r\nasync function runExample() {\r\n\ttry {\r\n\t\talert('about to create promise...')\r\n\r\n\t\t// IIFE form (Immediately Invoked Function Expression)\r\n\t\tconst { error, msg } = await (async () => ({ msg: 'from resolve' }))()\r\n\r\n\t\tif (error) {\r\n\t\t\tthrow new Error(error)\r\n\t\t}\r\n\t\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n\t} catch(err) {\r\n\t\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n\t}\r\n}\r\nrunExample()\r\n`\r\n\r\nexport const ASYNC_EXAMPLE_VALID_REJECTED =\r\n`// NOTE: one way to create a rejected promise is to throw an Error during resolution\r\nconst someAsyncFunc = async () => { throw new Error('This error forces a rejection') }\r\n\r\n// NOTE: in order to use await keyword, must be inside an async function\r\nasync function runExample() {\r\n\ttry{\r\n\t\talert('about to create promise...')\r\n\r\n\t\tconst { error, msg } = await someAsyncFunc()\r\n\r\n\t\tif (error) {\r\n\t\t\tthrow new Error(error)\r\n\t\t}\r\n\t\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n\t} catch(err) {\r\n\t\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n\t}\r\n}\r\nrunExample()\r\n`\r\n\r\nexport const ASYNC_EXAMPLE_INVALID_PROMISE =\r\n`// NOTE: in order to use await keyword, must be inside an async function\r\nasync function runExample() {\r\n\ttry {\r\n\t\talert('about to create promise...')\r\n\r\n\t\t// NOTE: invalid because of TSC: Argument of type '5' is not assignable\r\n\t\t// to parameter of type 'IResolution | PromiseLike<IResolution> | undefined'\r\n\t\tconst { error, msg } = await (async () => 5)()\r\n\r\n\t\tif (error) {\r\n\t\t\tthrow new Error(error)\r\n\t\t}\r\n\t\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n\t} catch(err) {\r\n\t\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n\t}\r\n}\r\nrunExample()\r\n`\r\n\r\nexport const ASYNC_EXAMPLE_INVALID_VOID =\r\n`// NOTE: in order to use await keyword, must be inside an async function\r\nasync function runExample() {\r\n\ttry {\r\n\t\talert('about to create promise...')\r\n\r\n\t\t// NOTE: invalid because return type is void\r\n\t\tconst { error, msg } = await (async () => { return })()\r\n\r\n\t\tif (error) {\r\n\t\t\tthrow new Error(error)\r\n\t\t}\r\n\t\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n\t} catch(err) {\r\n\t\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n\t}\r\n}\r\nrunExample()\r\n`\r\n","import React, { FC } from 'react'\r\n\r\n// local\r\nimport {\r\n\tQ_EXAMPLE_INVALID_PROMISE,\r\n\tQ_EXAMPLE_INVALID_PROMISE_UNDEFINED,\r\n\tQ_EXAMPLE_INVALID_PROMISE_UNDEFINED_USING_RESOLVE,\r\n\tQ_EXAMPLE_INVALID_PROMISE_UNRESOLVED,\r\n\tQ_EXAMPLE_INVALID_PROMISE_UNRESOLVED_2,\r\n\tQ_EXAMPLE_VALID,\r\n\tQ_EXAMPLE_VALID_REJECTED,\r\n\tQ_EXAMPLE_VALID_SINGLE_ARG,\r\n\tQ_EXAMPLE_VALID_USING_REJECT,\r\n\tQ_EXAMPLE_VALID_USING_RESOLVE\r\n} from './examples/examplesQ'\r\n\r\nimport { Example } from './Example'\r\nimport { ExampleViewer } from './ExampleViewer'\r\n\r\nimport './App.css'\r\n\r\nconst examples: Example[] = [\r\n\t// valid\r\n\tnew Example(Q_EXAMPLE_VALID, 'A Valid Resolved Q Library Promise'),\r\n\tnew Example(\r\n\t\tQ_EXAMPLE_VALID_SINGLE_ARG,\r\n\t\t'A Valid Resolved Q Library Promise',\r\n\t\t'This form uses a single argument'),\r\n\tnew Example(\r\n\t\tQ_EXAMPLE_VALID_USING_RESOLVE,\r\n\t\t'A Valid Resolved Q Library Promise',\r\n\t\t'This example makes use of the static resolve() function'),\r\n\tnew Example(\r\n\t\tQ_EXAMPLE_VALID_USING_REJECT,\r\n\t\t'A Valid Rejected Q Library Promise',\r\n\t\t'This example makes use of the static reject() function'),\r\n\tnew Example(Q_EXAMPLE_VALID_REJECTED, 'A Valid Rejected Q Library Promise'),\r\n\t// invalid\r\n\tnew Example(Q_EXAMPLE_INVALID_PROMISE, 'An Invalid Q Library Promise'),\r\n\tnew Example(\r\n\t\tQ_EXAMPLE_INVALID_PROMISE_UNDEFINED,\r\n\t\t'An Invalid Q Library Promise',\r\n\t\t'This promise will resolve with undefined'),\r\n\tnew Example(\r\n\t\tQ_EXAMPLE_INVALID_PROMISE_UNDEFINED_USING_RESOLVE,\r\n\t\t'An Invalid Q Library Promise',\r\n\t\t'This promise will resolve with undefined (uses the static resolve() function)'),\r\n\tnew Example(\r\n\t\tQ_EXAMPLE_INVALID_PROMISE_UNRESOLVED,\r\n\t\t'An Invalid Q Library Promise',\r\n\t\t'This promise will never resolve'),\r\n\tnew Example(\r\n\t\tQ_EXAMPLE_INVALID_PROMISE_UNRESOLVED_2,\r\n\t\t'An Invalid Q Library Promise',\r\n\t\t'This promise will also never resolve'),\r\n]\r\n\r\nconst AppWithQ: FC<any> = () => {\r\n\treturn <ExampleViewer\r\n\t\texamples={examples}\r\n\t\ttitle={'AppWithQ (Examples using Q Promise library)'} />\r\n}\r\n\r\nexport default AppWithQ\r\n","export const Q_EXAMPLE_VALID =\r\n`// NOTE: make Q library available first by fetching over the web\r\nfetch('https://cdnjs.cloudflare.com/ajax/libs/q.js/1.5.1/q.js')\r\n\t.then(resp => resp.text())\r\n\t.then(respText => {\r\n\t\teval(respText) // NOTE: execute Q library code dynamically\r\n\r\n\t\t// NOTE: VALID way to create resolved promise\r\n\t\tconst p = Q.Promise((resolve, reject, notify) => { resolve({ msg: 'from resolve' }) })\r\n\r\n\t\talert('promise created')\r\n\r\n\t\tp.then(({ error, msg }) => {\r\n\t\t\tif (error) {\r\n\t\t\t\tthrow new Error(error)\r\n\t\t\t}\r\n\t\t\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n\t\t})\r\n\t\t.progress(progress => {\r\n\t\t\tconsole.info(\\`progress=\\${progress}\\`)\r\n\t\t})\r\n\t\t.fail(err => {\r\n\t\t\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n\t\t})\r\n\t\t.done()\r\n\t})\r\n`\r\n\r\nexport const Q_EXAMPLE_VALID_SINGLE_ARG =\r\n`// NOTE: make Q library available first by fetching over the web\r\nfetch('https://cdnjs.cloudflare.com/ajax/libs/q.js/1.5.1/q.js')\r\n\t.then(resp => resp.text())\r\n\t.then(respText => {\r\n\t\teval(respText) // NOTE: execute Q library code dynamically\r\n\r\n\t\t// NOTE: VALID way to create resolved promise\r\n\t\t// (because reject is unused, single arg funcs require no parens)\r\n\t\tconst p = Q.Promise(resolve => { resolve({ msg: 'from resolve' }) })\r\n\r\n\t\talert('promise created')\r\n\r\n\t\tp.then(({ error, msg }) => {\r\n\t\t\tif (error) {\r\n\t\t\t\tthrow new Error(error)\r\n\t\t\t}\r\n\t\t\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n\t\t})\r\n\t\t.progress(progress => {\r\n\t\t\tconsole.info(\\`progress=\\${progress}\\`)\r\n\t\t})\r\n\t\t.fail(err => {\r\n\t\t\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n\t\t})\r\n\t\t.done()\r\n\t})\r\n`\r\n\r\nexport const Q_EXAMPLE_VALID_USING_RESOLVE =\r\n`// NOTE: make Q library available first by fetching over the web\r\nfetch('https://cdnjs.cloudflare.com/ajax/libs/q.js/1.5.1/q.js')\r\n\t.then(resp => resp.text())\r\n\t.then(respText => {\r\n\t\teval(respText) // NOTE: execute Q library code dynamically\r\n\r\n\t\t// NOTE: VALID way to create resolved promise\r\n\t\tconst p = Q.resolve({ msg: 'from resolve' })\r\n\r\n\t\talert('promise created')\r\n\r\n\t\tp.then(({ error, msg }) => {\r\n\t\t\tif (error) {\r\n\t\t\t\tthrow new Error(error)\r\n\t\t\t}\r\n\t\t\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n\t\t})\r\n\t\t.progress(progress => {\r\n\t\t\tconsole.info(\\`progress=\\${progress}\\`)\r\n\t\t})\r\n\t\t.fail(err => {\r\n\t\t\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n\t\t})\r\n\t\t.done()\r\n\t})\r\n`\r\n\r\nexport const Q_EXAMPLE_VALID_REJECTED =\r\n`// NOTE: make Q library available first by fetching over the web\r\nfetch('https://cdnjs.cloudflare.com/ajax/libs/q.js/1.5.1/q.js')\r\n\t.then(resp => resp.text())\r\n\t.then(respText => {\r\n\t\teval(respText) // NOTE: execute Q library code dynamically\r\n\r\n\t\t// NOTE: VALID way to create rejected promise\r\n\t\tconst p = Q.Promise((resolve, reject, notify) => { reject({ error: 'from reject' }) })\r\n\r\n\t\talert('promise created')\r\n\r\n\t\tp.then(({ error, msg }) => {\r\n\t\t\tif (error) {\r\n\t\t\t\tthrow new Error(error)\r\n\t\t\t}\r\n\t\t\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n\t\t})\r\n\t\t.progress(progress => {\r\n\t\t\tconsole.info(\\`progress=\\${progress}\\`)\r\n\t\t})\r\n\t\t.fail(err => {\r\n\t\t\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n\t\t})\r\n\t\t.done()\r\n\t})\r\n`\r\n\r\nexport const Q_EXAMPLE_VALID_USING_REJECT =\r\n`// NOTE: make Q library available first by fetching over the web\r\nfetch('https://cdnjs.cloudflare.com/ajax/libs/q.js/1.5.1/q.js')\r\n\t.then(resp => resp.text())\r\n\t.then(respText => {\r\n\t\teval(respText) // NOTE: execute Q library code dynamically\r\n\r\n\t\t// NOTE: VALID way to create rejected promise\r\n\t\tconst p = Q.reject({ error: 'from reject' })\r\n\r\n\t\talert('promise created')\r\n\r\n\t\tp.then(({ error, msg }) => {\r\n\t\t\tif (error) {\r\n\t\t\t\tthrow new Error(error)\r\n\t\t\t}\r\n\t\t\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n\t\t})\r\n\t\t.progress(progress => {\r\n\t\t\tconsole.info(\\`progress=\\${progress}\\`)\r\n\t\t})\r\n\t\t.fail(err => {\r\n\t\t\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n\t\t})\r\n\t\t.done()\r\n\t})\r\n`\r\n\r\nexport const Q_EXAMPLE_INVALID_PROMISE =\r\n`// NOTE: make Q library available first by fetching over the web\r\nfetch('https://cdnjs.cloudflare.com/ajax/libs/q.js/1.5.1/q.js')\r\n\t.then(resp => resp.text())\r\n\t.then(respText => {\r\n\t\teval(respText) // NOTE: execute Q library code dynamically\r\n\r\n\t\t// NOTE: invalid because of TSC: Argument of type '5' is not assignable\r\n\t\t// to parameter of type 'IResolution | PromiseLike<IResolution> | undefined'\r\n\t\tconst p = Q.Promise((resolve, reject, notify) => { resolve(5) })\r\n\r\n\t\talert('promise created')\r\n\r\n\t\tp.then(({ error, msg }) => {\r\n\t\t\tif (error) {\r\n\t\t\t\tthrow new Error(error)\r\n\t\t\t}\r\n\t\t\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n\t\t})\r\n\t\t.progress(progress => {\r\n\t\t\tconsole.info(\\`progress=\\${progress}\\`)\r\n\t\t})\r\n\t\t.fail(err => {\r\n\t\t\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n\t\t})\r\n\t\t.done()\r\n\t})\r\n`\r\n\r\nexport const Q_EXAMPLE_INVALID_PROMISE_UNDEFINED =\r\n`// NOTE: make Q library available first by fetching over the web\r\nfetch('https://cdnjs.cloudflare.com/ajax/libs/q.js/1.5.1/q.js')\r\n\t.then(resp => resp.text())\r\n\t.then(respText => {\r\n\t\teval(respText) // NOTE: execute Q library code dynamically\r\n\r\n\t\t// NOTE: is NOT invalid because return type allows undefined\r\n\t\t// WARNING: does NOT match expected return type on resolution\r\n\t\tconst p = Q.Promise((resolve, reject, notify) => { resolve() })\r\n\r\n\t\talert('promise created')\r\n\r\n\t\tp.then(({ error, msg }) => {\r\n\t\t\tif (error) {\r\n\t\t\t\tthrow new Error(error)\r\n\t\t\t}\r\n\t\t\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n\t\t})\r\n\t\t.progress(progress => {\r\n\t\t\tconsole.info(\\`progress=\\${progress}\\`)\r\n\t\t})\r\n\t\t.fail(err => {\r\n\t\t\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n\t\t})\r\n\t\t.done()\r\n\t})\r\n`\r\n\r\nexport const Q_EXAMPLE_INVALID_PROMISE_UNDEFINED_USING_RESOLVE =\r\n`// NOTE: make Q library available first by fetching over the web\r\nfetch('https://cdnjs.cloudflare.com/ajax/libs/q.js/1.5.1/q.js')\r\n\t.then(resp => resp.text())\r\n\t.then(respText => {\r\n\t\teval(respText) // NOTE: execute Q library code dynamically\r\n\r\n\t\t// NOTE: is NOT invalid because return type allows undefined\r\n\t\t// WARNING: does NOT match expected return type on resolution\r\n\t\tconst p = Q.resolve()\r\n\r\n\t\talert('promise created')\r\n\r\n\t\tp.then(({ error, msg }) => {\r\n\t\t\tif (error) {\r\n\t\t\t\tthrow new Error(error)\r\n\t\t\t}\r\n\t\t\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n\t\t})\r\n\t\t.progress(progress => {\r\n\t\t\tconsole.info(\\`progress=\\${progress}\\`)\r\n\t\t})\r\n\t\t.fail(err => {\r\n\t\t\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n\t\t})\r\n\t\t.done()\r\n\t})\r\n`\r\n\r\nexport const Q_EXAMPLE_INVALID_PROMISE_UNRESOLVED =\r\n`// NOTE: make Q library available first by fetching over the web\r\nfetch('https://cdnjs.cloudflare.com/ajax/libs/q.js/1.5.1/q.js')\r\n\t.then(resp => resp.text())\r\n\t.then(respText => {\r\n\t\teval(respText) // NOTE: execute Q library code dynamically\r\n\r\n\t\t// NOTE: is NOT invalid because return type allows undefined\r\n\t\t// WARNING: leaves promise unresolved AND unrejected - causes problems\r\n\t\tconst p = Q.Promise((resolve, reject, notify) => { return })\r\n\r\n\t\talert('promise created')\r\n\r\n\t\tp.then(({ error, msg }) => {\r\n\t\t\tif (error) {\r\n\t\t\t\tthrow new Error(error)\r\n\t\t\t}\r\n\t\t\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n\t\t})\r\n\t\t.progress(progress => {\r\n\t\t\tconsole.info(\\`progress=\\${progress}\\`)\r\n\t\t})\r\n\t\t.fail(err => {\r\n\t\t\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n\t\t})\r\n\t\t.done()\r\n\t})\r\n`\r\n\r\nexport const Q_EXAMPLE_INVALID_PROMISE_UNRESOLVED_2 =\r\n`// NOTE: make Q library available first by fetching over the web\r\nfetch('https://cdnjs.cloudflare.com/ajax/libs/q.js/1.5.1/q.js')\r\n\t.then(resp => resp.text())\r\n\t.then(respText => {\r\n\t\teval(respText) // NOTE: execute Q library code dynamically\r\n\r\n\t\t// NOTE: is NOT invalid because return type allows undefined\r\n\t\t// WARNING: leaves promise unresolved AND unrejected - causes problems\r\n\t\tconst p = Q.Promise((resolve, reject, notify) => {})\r\n\r\n\t\talert('promise created')\r\n\r\n\t\tp.then(({ error, msg }) => {\r\n\t\t\tif (error) {\r\n\t\t\t\tthrow new Error(error)\r\n\t\t\t}\r\n\t\t\talert(\\`inside then... resolution.msg=\\${msg}...\\`)\r\n\t\t})\r\n\t\t.progress(progress => {\r\n\t\t\tconsole.info(\\`progress=\\${progress}\\`)\r\n\t\t})\r\n\t\t.fail(err => {\r\n\t\t\talert(\\`an error occured... \\\\n\\\\n\\${ JSON.stringify(err, null, 4) }\\`)\r\n\t\t})\r\n\t\t.done()\r\n\t})\r\n`\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {\r\n\tBrowserRouter as Router,\r\n\tLink,\r\n\tRoute,\r\n\tSwitch\r\n} from 'react-router-dom'\r\n\r\nimport App from './App'\r\nimport AppWithAsync from './AppWithAsync'\r\nimport AppWithQ from './AppWithQ'\r\n\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nimport './index.css'\r\n\r\nReactDOM.render((\r\n\t<Router>\r\n\t\t<Switch>\r\n\t\t\t<Route path=\"/q\" component={AppWithQ} />\r\n\t\t\t<Route path=\"/async\" component={AppWithAsync} />\r\n\t\t\t<Route path=\"/\" component={App} />\r\n\t\t</Switch>\r\n\t\t<nav>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<Link to=\"/\">Home (Native Promises)</Link>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<Link to=\"/async\">Async / Await Promises</Link>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<Link to=\"/q\">Q Library Promises</Link>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</nav>\r\n\t</Router>\r\n), document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","import React, { FC, useState } from 'react'\r\n\r\n// local\r\nimport { Example } from './Example'\r\nimport { SimpleAppContent } from './SimpleAppContent'\r\n\r\nexport interface IExampleViewerProps {\r\n\texamples: Example[]\r\n\ttitle: string\r\n}\r\n\r\nconst ExampleViewer: FC<any> = props => {\r\n\tconst [currentExampleIndex, setCurrentExampleIndex] = useState(0)\r\n\tconst handleClickNext = () => {\r\n\t\tsetCurrentExampleIndex(oldIndex => (oldIndex + 1) % props.examples.length)\r\n\t}\r\n\tconst handleClickPrevious = () => {\r\n\t\tsetCurrentExampleIndex(oldIndex => {\r\n\t\t\tlet newVal = oldIndex - 1\r\n\r\n\t\t\tif (newVal < 0) {\r\n\t\t\t\tnewVal = props.examples.length - 1\r\n\t\t\t}\r\n\r\n\t\t\treturn newVal\r\n\t\t})\r\n\t}\r\n\tconst handleClickRun = () => {\r\n\t\ttry {\r\n\t\t\t/* eslint no-eval: 0 */\r\n\t\t\teval(props.examples[currentExampleIndex].text)\r\n\t\t} catch (err) {\r\n\t\t\talert(err)\r\n\t\t}\r\n\t}\r\n\tconst currentExample = props.examples[currentExampleIndex]\r\n\r\n\treturn (\r\n\t\t<SimpleAppContent pageTitle={props.title}>\r\n\t\t\t<section className=\"btn-controls\">\r\n\t\t\t\t<button className=\"btn-change-example prev\"\r\n\t\t\t\t\tonClick={handleClickPrevious}\r\n\t\t\t\t\t>\r\n\t\t\t\t\tPrevious Example\r\n\t\t\t\t</button>\r\n\t\t\t\t<button className=\"btn-change-example next\"\r\n\t\t\t\t\tonClick={handleClickNext}\r\n\t\t\t\t\t>\r\n\t\t\t\t\tNext Example\r\n\t\t\t\t</button>\r\n\t\t\t</section>\r\n\t\t\t<h3>Example {currentExampleIndex + 1} - {currentExample.summary}</h3>\r\n\t\t\t{currentExample.description.length > 0 && <h5>{currentExample.description}</h5>}\r\n\t\t\t<textarea\r\n\t\t\t\tcols={120}\r\n\t\t\t\treadOnly={true}\r\n\t\t\t\trows={15}\r\n\t\t\t\tstyle={{ margin: 25 }}\r\n\t\t\t\tvalue={currentExample.text}\r\n\t\t\t/>\r\n\t\t\t<button className=\"btn-run-example\"\r\n\t\t\t\tonClick={handleClickRun}\r\n\t\t\t\t>\r\n\t\t\t\tRun Example\r\n\t\t\t</button>\r\n\t\t</SimpleAppContent>\r\n\t)\r\n}\r\n\r\nexport { ExampleViewer }\r\n"],"sourceRoot":""}